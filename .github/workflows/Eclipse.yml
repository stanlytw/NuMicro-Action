name: Eclipse building

on:
  workflow_dispatch:
    inputs:
      git-address:
        description: 'git-address'
        required: true
        default: 'https://github.com/OpenNuvoton/M2L31BSP.git'
      branches-tags:
        description: 'branches-tags'
        required: true
        default: 'master'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Clone source code
        shell: bash
        run: |
          git clone ${{github.event.inputs.git-address}} ./bsp_repo

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip default-jre make

          echo "üåç Downloading arm-none-eabi-toolchain for Linux x64"
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          tar -jxf gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2
          echo "$PWD/gcc-arm-none-eabi-10.3-2021.10/bin" >> $GITHUB_PATH
          ls -al $PWD

          echo "üåç Downloading aarch64-elf-toolchain for Linux x64"
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz
          tar -xf gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz
          echo "$PWD/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin" >> $GITHUB_PATH
          ls -al $PWD

          echo "üåç Downloading Eclipse for Linux"
          wget -q https://ftp.yz.yamagata-u.ac.jp/pub/eclipse/technology/epp/downloads/release/2025-06/M1/eclipse-embedcpp-2025-06-M1-linux-gtk-x86_64.tar.gz
          tar -xzf eclipse-embedcpp-2025-06-M1-linux-gtk-x86_64.tar.gz
          mv eclipse eclipse-cdt

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          choco install unzip jre8 -y

          echo "üåç Downloading arm-none-eabi-toolchain for Windows"
          curl -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-win32.zip
          unzip -q gcc-arm-none-eabi-10.3-2021.10-win32.zip -d toolchain_arm
          echo "${PWD}/toolchain_arm/gcc-arm-none-eabi-10.3-2021.10/bin" >> $GITHUB_PATH
          ls -al toolchain_arm/gcc-arm-none-eabi-10.3-2021.10/bin

          echo "üåç Downloading aarch64-none-elf-toolchain for Windows"
          curl -LO https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-mingw-w64-i686-aarch64-none-elf.tar.xz
          tar -xf gcc-arm-10.3-2021.07-mingw-w64-i686-aarch64-none-elf.tar.xz
          echo "${PWD}/gcc-arm-10.3-2021.07-mingw-w64-i686-aarch64-none-elf/bin" >> $GITHUB_PATH
          ls -al gcc-arm-10.3-2021.07-mingw-w64-i686-aarch64-none-elf/bin

          echo "üåç Downloading Eclipse for Windows"
          curl -LO https://ftp.yz.yamagata-u.ac.jp/pub/eclipse/technology/epp/downloads/release/2025-06/M1/eclipse-embedcpp-2025-06-M1-win32-x86_64.zip
          unzip -q eclipse-embedcpp-2025-06-M1-win32-x86_64.zip
          mv eclipse eclipse-cdt
          ls -al eclipse-cdt
          echo $GITHUB_PATH

      - name: Build all Eclipse projects
        shell: bash
        run: |

          echo $GITHUB_PATH
          echo $PATH

          echo "‚úÖ Version check"
          arm-none-eabi-gcc --version
          aarch64-none-elf-gcc --version

          mkdir -p "$GITHUB_WORKSPACE/artifacts"

          for dir in $(find ./bsp_repo/SampleCode -type f -name .cproject -exec dirname {} \;); do

            mkdir -p "$GITHUB_WORKSPACE/workspace"

            echo "üî® Building $dir on $RUNNER_OS"
            timeout 5m ./eclipse-cdt/eclipse \
              -nosplash \
              -application org.eclipse.cdt.managedbuilder.core.headlessbuild \
              -data "$GITHUB_WORKSPACE/workspace" \
              -import "$GITHUB_WORKSPACE/$dir" \
              -build all

            echo "üßπ Collecting .bin files"
            bin_files=$(find "$dir" -type f -name "*.bin")
            for bin_file in $bin_files; do
              base_name=$(basename "$bin_file")
              bin_file_relative_path=$(realpath --relative-to="$GITHUB_WORKSPACE" "$bin_file")
              bin_file_dir=$(dirname "$bin_file_relative_path")
              prefix=$(echo "${bin_file_dir}" | tr '/' '_')
              new_name="${prefix}_${base_name}"

              echo "üì¶ Copying $bin_file ‚Üí artifacts/$new_name"
              cp "$bin_file" "$GITHUB_WORKSPACE/artifacts/$new_name"
            done

            rm -rf "$GITHUB_WORKSPACE/workspace"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.os }}
          path: ${{ github.workspace }}/artifacts/*.bin
