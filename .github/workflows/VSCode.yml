name: VSCode building

on:
  workflow_dispatch:
    inputs:
      git-address:
        description: 'git-address'
        required: true
        default: 'https://github.com/wosayttn/M55M1BSP.git'
      branches-tags:
        description: 'branches-tags'
        required: true
        default: 'master'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        #os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Clone source code
        shell: bash
        run: |
          git clone ${{github.event.inputs.git-address}} ./bsp_repo

      - name: Install jq on Windows
        if: matrix.os == 'windows-latest'
        run: choco install jq python

      - name: Install Python 3
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip

      - name: Install tools
        uses: ARM-software/cmsis-actions/vcpkg@v1
        with:
          config: ".github/workflows/vcpkg-configuration.json"

      - name: Activate Arm tool license
        uses: ARM-software/cmsis-actions/armlm@v1     

      - name: Activate & Build each csolution
        shell: bash
        run: |
          REPO_ROOT="$GITHUB_WORKSPACE"
          chmod +x "$GITHUB_WORKSPACE/.github/workflows/vcpkg_build.sh"
          chmod +x "$GITHUB_WORKSPACE/.github/workflows/vcpkg_blacklist_check.sh"

          mapfile -t solutions < <(find ./bsp_repo/SampleCode/SecureApplication/SecureOTADemo/ -name '*.csolution.yml')

          declare -a failed_logs=()

          set +e
          for sol_path in "${solutions[@]}"; do
            sol_dir=$(dirname "$sol_path")
            sol_name=$(basename "$sol_path")
            log_path="$sol_dir/$sol_name.txt"

            # Build & Produce log file
            $REPO_ROOT/.github/workflows/vcpkg_build.sh "$sol_path" > $log_path
            # Check log file
            $REPO_ROOT/.github/workflows/vcpkg_blacklist_check.sh $log_path
            ret=$?

            if [[ $ret -ne 0 ]]; then
              echo "❌ Build failed: $sol_path"
              echo "🔍 Log:"
              #cat "$log_path"
              failed_logs+=("$log_path")   #add log into the set.
            else
              echo "✅ Build success: $sol_path"
            fi

          done
          set -e

          # 結尾列出所有失敗的 log 路徑（若有）
          if [[ ${#failed_logs[@]} -ne 0 ]]; then
            echo "🚨 The following builds failed:"
            for log in "${failed_logs[@]}"; do
              echo "  - $log"
            done
            printf "%s," "${failed_logs[@]}" | sed 's/,$//' > failed_logs.txt
            echo "Wrote failed_logs.txt"
            exit 1
          else
            echo "🎉 All builds succeeded!"
          fi
  
      - name: Prepare failed logs for email
        id: prepare_logs
        if: failure()  # only runs if previous step failed
        run: |
          logs=$(cat failed_logs.txt)
          echo "logs=$logs" >> "$GITHUB_OUTPUT"

      - name: Send mail
        if: failure()
        uses: dawidd6/action-send-mail@v5
        with:
          connection_url: ${{ secrets.MAIL_CONNECTION }}
          subject: ${{ github.repository }} Job result
          to: ${{ secrets.MAIL_TO }}
          #cc: ${{ secrets.MAIL_CC }}
          from: Github Action Workflow <wosayttn@gmail.com>
          attachments: ${{ steps.prepare_logs.outputs.logs }}
          body: |
            Hello,

            The build has completed. Please find the attached log file for details.

            Best regards,
            NuMicro Actions

      #- name: Upload build artifacts
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: firmware-${{ matrix.os }}
      #    path: |
      #      **/SampleCode/**/*.bin
